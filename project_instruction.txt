you‚Äôll build a **CLI-based MVP** with Node.js that‚Äôs fast, hackathon-ready, and aligned with the problem statement.

---

# üñ•Ô∏è Project Prompt ‚Äì CLI-based MVP (Node.js + TypeScript + MongoDB)

## üéØ Goal

Build a **Node.js CLI application** that:

1. Imports **NAMASTE CSV** ‚Üí saves into MongoDB as **FHIR CodeSystem documents**.
2. Fetches **ICD-11 (TM2 + Biomedicine)** codes from WHO API.
3. Creates **ConceptMap** between NAMASTE ‚Üî ICD-11.
4. Provides **search and translate commands**.
5. Uploads **FHIR Encounter/ProblemList JSON** into MongoDB.
6. Logs **audit trails** for every action.

---

## ‚öôÔ∏è Tech Stack

* **Language**: TypeScript (safer + structured).
* **Runtime**: Node.js
* **Database**: MongoDB (with Mongoose ORM)
* **CLI Framework**: `commander` or `yargs`
* **CSV Parsing**: `csv-parser`
* **FHIR Utils**: custom TypeScript models (FHIR R4 JSON is just structured JSON).
* **HTTP Requests**: `axios` (to call WHO ICD API).

---

## üìÇ MongoDB Collections

* `namaste_codes` ‚Üí `{ code, name, description }`
* `icd_codes` ‚Üí `{ code, title, type }`  // type = "TM2" | "Biomedicine"
* `concept_map` ‚Üí `{ namaste_code, icd_code }`
* `encounters` ‚Üí `{ encounterId, patientId, problems: [...], createdAt }`
* `audit_logs` ‚Üí `{ user, action, timestamp }`

---

## üõ†Ô∏è Step-by-Step Tasks

### **Task 1 ‚Äì Project Setup**

* Init project:

  ```bash
  npm init -y
  npm install typescript ts-node @types/node mongoose commander csv-parser axios
  npx tsc --init
  ```
* Setup `src/` folder with:

  * `db.ts` ‚Üí MongoDB connection.
  * `models/` ‚Üí Mongoose schemas.
  * `commands/` ‚Üí CLI commands.
  * `app.ts` ‚Üí entry point.

---

### **Task 2 ‚Äì Ingest NAMASTE CSV**

* Parse CSV with `csv-parser`.
* Store rows in `namaste_codes` collection.
* Also generate a **FHIR CodeSystem JSON** for each entry.

CLI Command:

```bash
ts-node src/app.ts ingest-namaste namaste.csv
```

---

### **Task 3 ‚Äì Fetch ICD-11 Codes**

* Use WHO ICD API (`Installing ICD-API as a systemd service in Linux
It is possible to install the ICD-API as a systemd service in Linux.

Prerequisites
The binary files provided for Linux are x64 binaries and requires an x64 Linux installation
A Linux system with systemd support. Most of the Linux distributions already have support for systemd services by default.
By installing this package you agree with our license agreement
Steps for Installing the ICD-API as a systemd service
Download the icd-api for linux version 2.5.0 package (already downloaded, file present in /home/aman/ICD-11/ICD_API_LINUX/icdapi/)
Copy all files in the tar file to /srv/icdapi folder
Copy icdapi.service file under /etc/systemd/system folder
Edit the icdapi.service file and change User=myusername line to the user that will run the service
run sudo systemctl daemon-reload command so that the new service is known to the system
start the ICD-API by running sudo systemctl start icdapi
to enable auto-start after reboot enter sudo systemctl enable icdapi
you may use sudo systemctl stop icdapi to stop the service or sudo systemctl status icdapi to see its status.
Checking the Installation
By default the API is installed at port 8382 so you should be able to access the API from http://<hostname>:8382/icd/...
IMPORTANT! Please note that in earlier releases we were using port 6382 which has changed to 8382 in this release.
Since we deploy an instance of the Coding Tool together with the API, visiting the URL http://<hostname>:8382/ct should open up the ICD-11 Coding Tool.
Similarly, visiting the URL http://<hostname>:8382/browse should open up the ICD-11 Browser.
Configuration
By default the API runs at port 8382. You could change it by editing the file /srv/icdapi/appsettings.json the line that has : "urls": "http://*:8382"

By default the API runs with the latest version of the ICD-11, To change this you may edit the appsettings.json file and change the "include" field.

Here are some examples:

"include": "2025-01_en" means 2025-01 version of ICD-11 in English (default)
"include": "2025-01_tr" means 2025-01 version of ICD-11 in Turkish
"include": "2025-01_ar-en" means 2025-01 version of ICD-11 in Arabic and English
"include": "2024-01_en" means 2024-01 version of ICD-11 in English
Available versions and languages of ICD-11 are listed at the supported classifications. ICD-10 is not supported in this release.

DORIS (Underlying cause of death detection) functionality is in pre-release state. For this reason it is not enabled by default.
You may enable the DORIS endpoints using the "enableDoris": true parameter. For more information about DORIS support see the release notes.

If you set the saveAnalytics to true in the appsettings.json file, the software that is installed can send data to WHO on the searches made in order to improve search capability of ICD-11 tools. The data that is sent does not contain any ids or IP addresses.

You need to restart the service after making any changes to the appsettings.json file

Updating the ICD-API
To update the ICD-API that is installed as a systemd service, you need to stop the service (sudo systemctl stop icdapi), replace all files in the tar file to /srv/icdapi folder and restart the service (sudo systemctl start icdapi)

`).
* Example: `axios.get("https://id.who.int/icd/release/11/2023/search?q=digestion")`
* Store results in `icd_codes` with type = `"TM2"` or `"Biomedicine"`.

CLI Command:

```bash
ts-node src/app.ts fetch-icd "digestion"
```

---

### **Task 4 ‚Äì Create ConceptMap**

* Manually map NAMASTE ‚Üî ICD-11 (store in `concept_map`).
* Also output a **FHIR ConceptMap JSON**.

CLI Command:

```bash
ts-node src/app.ts map-code NAM123 ICD-XYZ
```

---

### **Task 5 ‚Äì Implement Search**

* Query both collections (`namaste_codes`, `icd_codes`) by keyword.
* Return combined results.

CLI Command:

```bash
ts-node src/app.ts search "digestion"
```

Example Output:

```
NAMASTE: NAM123 ‚Äì Agnimandya (weak digestion)
ICD-11 TM2: TM2-456 ‚Äì Disorder of digestion
ICD-11 Biomedicine: BD4Y ‚Äì Functional dyspepsia
```

---

### **Task 6 ‚Äì Translate Codes**

* Lookup mappings in `concept_map`.

CLI Command:

```bash
ts-node src/app.ts translate NAM123
```

Output:

```
NAMASTE ‚Üí ICD-11 TM2: TM2-456
NAMASTE ‚Üí ICD-11 Biomedicine: BD4Y
```

---

### **Task 7 ‚Äì Upload Encounter**

* Accepts a **FHIR Bundle JSON file** (with dual-coded ProblemList).
* Validate minimal fields (patientId, problems\[]).
* Save in `encounters` + log action in `audit_logs`.

CLI Command:

```bash
ts-node src/app.ts upload-encounter encounter.json
```

---

### **Task 8 ‚Äì Audit Logs**

* Every command logs `{ user, action, timestamp }` in `audit_logs`.

CLI Command:

```bash
ts-node src/app.ts view-logs
```

---

## ‚úÖ Final CLI Commands

1. `ingest-namaste namaste.csv` ‚Üí Import NAMASTE codes.
2. `fetch-icd "keyword"` ‚Üí Fetch ICD codes.
3. `map-code NAM123 ICD456` ‚Üí Create mapping.
4. `search "keyword"` ‚Üí Search across NAMASTE + ICD.
5. `translate NAM123` ‚Üí Show ICD mappings.
6. `upload-encounter encounter.json` ‚Üí Store patient record.
7. `view-logs` ‚Üí Show audit logs.

---

## üé¨ Demo Flow (Hackathon)

1. Ingest `namaste.csv` ‚Üí ‚ÄúLoaded 20 NAMASTE codes into MongoDB.‚Äù
2. Fetch ICD codes ‚Üí ‚ÄúFound 5 ICD-11 codes for digestion.‚Äù
3. Map NAM123 ‚Üí ICD-TM2-456.
4. Search ‚Äúdigestion‚Äù ‚Üí Show dual codes.
5. Translate NAM123 ‚Üí Show ICD equivalents.
6. Upload encounter.json ‚Üí Save ProblemList with both codes.
7. View logs ‚Üí Show timeline of actions.

---

üëâ Aman, do you want me to now **write skeleton TypeScript code for MongoDB models + a sample command (like `search`)** so you can start coding right away?
